:orphan:

:mod:`trieste.acquisition.function`
===================================

.. py:module:: trieste.acquisition.function


Module Contents
---------------

.. data:: AcquisitionFunction
   

   Type alias for acquisition functions.

   An `AcquisitionFunction` maps a single query point (of dimension `D`) to a single value that
   describes how useful it would be evaluate that point (to our goal of optimizing the objective
   function). Thus, with leading dimensions, an `AcquisitionFunction` takes input shape
   `[..., D]` and returns shape `[..., 1]`.

   **Note:** Type checkers will not be able to distinguish an `AcquisitionFunction` from a
   `BatchAcquisitionFunction`.


.. data:: BatchAcquisitionFunction
   

   Type alias for batch acquisition functions.

   A `BatchAcquisitionFunction` maps a set of `B` query points (each of dimension `D`) to a single
   value that describes how useful it would be evaluate all these points together (to our goal of
   optimizing the objective function). Thus, with leading dimensions, a `BatchAcquisitionFunction`
   takes input shape `[..., B, D]` and returns shape `[..., 1]`.

   **Note:** Type checkers will not be able to distinguish an `AcquisitionFunction` from a
   `BatchAcquisitionFunction`.


.. class:: AcquisitionFunctionBuilder

   Bases: :class:`abc.ABC`

   An :class:`AcquisitionFunctionBuilder` builds an acquisition function. 

   .. method:: prepare_acquisition_function(self, datasets: Mapping[(str, Dataset)], models: Mapping[(str, ProbabilisticModel)]) -> AcquisitionFunction
      :abstractmethod:

      :param datasets: The data from the observer.
      :param models: The models over each dataset in ``datasets``.
      :return: An acquisition function.



.. class:: SingleModelAcquisitionBuilder

   Bases: :class:`abc.ABC`

   Convenience acquisition function builder for an acquisition function (or component of a
   composite acquisition function) that requires only one model, dataset pair.

   .. method:: using(self, tag: str) -> trieste.acquisition.function.AcquisitionFunctionBuilder

      :param tag: The tag for the model, dataset pair to use to build this acquisition function.
      :return: An acquisition function builder that selects the model and dataset specified by
          ``tag``, as defined in :meth:`prepare_acquisition_function`.


   .. method:: prepare_acquisition_function(self, dataset: trieste.data.Dataset, model: trieste.models.ProbabilisticModel) -> AcquisitionFunction
      :abstractmethod:

      :param dataset: The data to use to build the acquisition function.
      :param model: The model over the specified ``dataset``.
      :return: An acquisition function.



.. class:: ExpectedImprovement

   Bases: :class:`trieste.acquisition.function.SingleModelAcquisitionBuilder`

   Builder for the expected improvement function where the "best" value is taken to be the minimum
   of the posterior mean at observed points.

   .. method:: prepare_acquisition_function(self, dataset: trieste.data.Dataset, model: trieste.models.ProbabilisticModel) -> AcquisitionFunction

      :param dataset: The data from the observer. Must be populated.
      :param model: The model over the specified ``dataset``.
      :return: The expected improvement function.
      :raise ValueError: If ``dataset`` is empty.



.. function:: expected_improvement(model: trieste.models.ProbabilisticModel, eta: trieste.type.TensorType, at: trieste.type.TensorType) -> trieste.type.TensorType

   The Expected Improvement (EI) acquisition function for single-objective global optimization.
   Return the expectation of the improvement at ``at`` over the current "best" observation ``eta``,
   where an improvement moves towards the objective function's minimum, and the expectation is
   calculated with respect to the ``model`` posterior. For model posterior :math:`f`, this is

   .. math:: x \mapsto \mathbb E \left[ \max (\eta - f(x), 0) \right]

   This function was introduced by Mockus et al, 1975. See :cite:`Jones:1998` for details.

   :param model: The model of the objective function.
   :param eta: The "best" observation.
   :param at: The points for which to calculate the expected improvement.
   :return: The expected improvement at ``at``.


.. class:: NegativeLowerConfidenceBound(beta: float = 1.96)


   Bases: :class:`trieste.acquisition.function.SingleModelAcquisitionBuilder`

   Builder for the negative of the lower confidence bound. The lower confidence bound is typically
   minimised, so the negative is suitable for maximisation.

   :param beta: Weighting given to the variance contribution to the lower confidence bound.
       Must not be negative.

   .. method:: prepare_acquisition_function(self, dataset: trieste.data.Dataset, model: trieste.models.ProbabilisticModel) -> AcquisitionFunction

      :param dataset: Unused.
      :param model: The model over the specified ``dataset``.
      :return: The negative of the lower confidence bound function. This function will raise
          `ValueError` if ``beta`` is negative.



.. class:: NegativePredictiveMean


   Bases: :class:`trieste.acquisition.function.NegativeLowerConfidenceBound`

   Builder for the negative of the predictive mean. The predictive mean is minimised on minimising
   the objective function. The negative predictive mean is therefore maximised.

   :param beta: Weighting given to the variance contribution to the lower confidence bound.
       Must not be negative.


.. function:: lower_confidence_bound(model: trieste.models.ProbabilisticModel, beta: float, at: trieste.type.TensorType) -> trieste.type.TensorType

   The lower confidence bound (LCB) acquisition function for single-objective global optimization.

   .. math:: x^* \mapsto \mathbb{E} [f(x^*)|x, y] - \beta \sqrt{ \mathrm{Var}[f(x^*)|x, y] }

   See :cite:`Srinivas:2010` for details.

   :param model: The model of the objective function.
   :param beta: The weight to give to the standard deviation contribution of the LCB. Must not be
       negative.
   :param at: The points at which to evaluate the LCB.
   :return: The lower confidence bound at ``at``.
   :raise ValueError: If ``beta`` is negative.


.. class:: ProbabilityOfFeasibility(threshold: Union[(float, TensorType)])


   Bases: :class:`trieste.acquisition.function.SingleModelAcquisitionBuilder`

   Builder for the :func:`probability_of_feasibility` acquisition function, defined in
   :cite:`gardner14` as

   .. math::

       \int_{-\infty}^{\tau} p(c(\mathbf{x}) | \mathbf{x}, \mathcal{D}) \mathrm{d} c(\mathbf{x})
       \qquad ,

   where :math:`\tau` is a threshold. Values below the threshold are considered feasible by the
   constraint function. See also :cite:`schonlau1998global` for details.

   :param threshold: The (scalar) probability of feasibility threshold.
   :raise ValueError (or InvalidArgumentError): If ``threshold`` is not a scalar.

   .. method:: threshold(self) -> Union[(float, TensorType)]
      :property:

      The probability of feasibility threshold. 


   .. method:: prepare_acquisition_function(self, dataset: trieste.data.Dataset, model: trieste.models.ProbabilisticModel) -> AcquisitionFunction

      :param dataset: Unused.
      :param model: The model over the specified ``dataset``.
      :return: The probability of feasibility acquisition function.



.. function:: probability_of_feasibility(model: trieste.models.ProbabilisticModel, threshold: Union[(float, TensorType)], at: trieste.type.TensorType) -> trieste.type.TensorType

   The probability of feasibility acquisition function defined in :cite:`gardner14` as

   .. math::

       \int_{-\infty}^{\tau} p(c(\mathbf{x}) | \mathbf{x}, \mathcal{D}) \mathrm{d} c(\mathbf{x})
       \qquad ,

   where :math:`\tau` is a threshold. Values below the threshold are considered feasible by the
   constraint function.

   :param model: The model of the objective function.
   :param threshold: The (scalar) probability of feasibility threshold.
   :param at: The points at which to evaluate the probability of feasibility. Must have rank at
       least two
   :return: The probability of feasibility at ``at``.
   :raise ValueError (or InvalidArgumentError): If arguments have the incorrect shape.


.. class:: ExpectedConstrainedImprovement(objective_tag: str, constraint_builder: trieste.acquisition.function.AcquisitionFunctionBuilder, min_feasibility_probability: Union[(float, TensorType)] = 0.5)


   Bases: :class:`trieste.acquisition.function.AcquisitionFunctionBuilder`

   Builder for the *expected constrained improvement* acquisition function defined in
   :cite:`gardner14`. The acquisition function computes the expected improvement from the best
   feasible point, where feasible points are those that (probably) satisfy some constraint. Where
   there are no feasible points, this builder simply builds the constraint function.

   :param objective_tag: The tag for the objective data and model.
   :param constraint_builder: The builder for the constraint function.
   :param min_feasibility_probability: The minimum probability of feasibility for a
       "best point" to be considered feasible.
   :raise ValueError (or InvalidArgumentError): If ``min_feasibility_probability`` is not a
       scalar in the unit interval :math:`[0, 1]`.

   .. method:: prepare_acquisition_function(self, datasets: Mapping[(str, Dataset)], models: Mapping[(str, ProbabilisticModel)]) -> AcquisitionFunction

      :param datasets: The data from the observer.
      :param models: The models over each dataset in ``datasets``.
      :return: The expected constrained improvement acquisition function.
      :raise KeyError: If `objective_tag` is not found in ``datasets`` and ``models``.
      :raise ValueError: If the objective data is empty.



.. class:: IndependentReparametrizationSampler(sample_size: int, model: trieste.models.ProbabilisticModel)


   This sampler employs the *reparameterization trick* to approximate samples from a
   :class:`ProbabilisticModel`\ 's predictive distribution as

   .. math:: x \mapsto \mu(x) + \epsilon \sigma(x)

   where :math:`\epsilon \sim \mathcal N (0, 1)` is constant for a given sampler, thus ensuring
   samples form a continuous curve.

   :param sample_size: The number of samples to take at each point. Must be positive.
   :param model: The model to sample from.
   :raise ValueError (or InvalidArgumentError): If ``sample_size`` is not positive.

   .. method:: sample(self, at: trieste.type.TensorType) -> trieste.type.TensorType

      Return approximate samples from the `model` specified at :meth:`__init__`. Multiple calls to
      :meth:`sample`, for any given :class:`IndependentReparametrizationSampler` and ``at``, will
      produce the exact same samples. Calls to :meth:`sample` on *different*
      :class:`IndependentReparametrizationSampler` instances will produce different samples.

      :param at: Where to sample the predictive distribution, with shape `[..., D]`, for points
          of dimension `D`.
      :return: The samples, of shape `[..., S, L]`, where `S` is the `sample_size` and `L` is the
          number of latent model dimensions.
      :raise ValueError (or InvalidArgumentError): If ``at`` is a scalar.



.. class:: MCIndAcquisitionFunctionBuilder(sample_size: int)


   Bases: :class:`trieste.acquisition.function.AcquisitionFunctionBuilder`

   A :class:`MCIndAcquisitionFunctionBuilder` builds an acquisition function that
   estimates the value of evaluating the observer at a given point, and does this using Monte-Carlo
   estimation via the reparameterization trick. This class is essentially a convenience
   :class:`AcquisitionFunctionBuilder` using a :class:`IndependentReparametrizationSampler`.

   Subclasses implement :meth:`_build_with_sampler` which, in addition to the arguments `datasets`
   and `models`, provides a :class:`IndependentReparametrizationSampler` for each model which can
   be used to approximate continuous samples from the models.

   :param sample_size: The number of samples to take at each point. Must be positive.
   :raise ValueError (or InvalidArgumentError): If ``sample_size`` is not positive.

   .. method:: prepare_acquisition_function(self, datasets: Mapping[(str, Dataset)], models: Mapping[(str, ProbabilisticModel)]) -> AcquisitionFunction

      :param datasets: The data from the observer.
      :param models: The models over each dataset in ``datasets``.
      :return: An acquisition function.


   .. method:: _build_with_sampler(self, datasets: Mapping[(str, Dataset)], models: Mapping[(str, ProbabilisticModel)], samplers: Mapping[(str, IndependentReparametrizationSampler)]) -> AcquisitionFunction
      :abstractmethod:

      :param datasets: The data from the observer.
      :param models: The models over each dataset in ``datasets``.
      :param samplers: A sampler for each model in ``models``.
      :return: An acquisition function.



.. class:: SingleModelMCIndAcquisitionFunctionBuilder(sample_size: int)


   Bases: :class:`trieste.acquisition.function.SingleModelAcquisitionBuilder`

   A :class:`SingleModelMCIndAcquisitionFunctionBuilder` builds an acquisition function that
   estimates the value of evaluating the observer at a given point, and does this using Monte-Carlo
   estimation via the reparameterization trick. This class is essentially a convenience
   :class:`SingleModelAcquisitionBuilder` using a :class:`IndependentReparametrizationSampler`.

   Subclasses implement :meth:`_build_with_sampler` which, in addition to the arguments `dataset`
   and `model`, provides a :class:`IndependentReparametrizationSampler` which can be used to
   approximate continuous samples from the model.

   :param sample_size: The number of samples to take at each point. Must be positive.
   :raise ValueError (or InvalidArgumentError): If ``sample_size`` is not positive.

   .. method:: prepare_acquisition_function(self, dataset: trieste.data.Dataset, model: trieste.models.ProbabilisticModel) -> AcquisitionFunction

      :param dataset: The data to use to build the acquisition function.
      :param model: The model over the specified ``dataset``.
      :return: An acquisition function.


   .. method:: _build_with_sampler(self, dataset: trieste.data.Dataset, model: trieste.models.ProbabilisticModel, sampler: trieste.acquisition.function.IndependentReparametrizationSampler) -> AcquisitionFunction
      :abstractmethod:

      :param dataset: The data to use to build the acquisition function.
      :param model: The model over the specified ``dataset``.
      :param sampler: A sampler for ``model``.
      :return: An acquisition function.



.. class:: BatchAcquisitionFunctionBuilder

   Bases: :class:`abc.ABC`

   A :class:`BatchAcquisitionFunctionBuilder` builds an acquisition function for evaluating batches
   of query points.

   .. method:: prepare_acquisition_function(self, datasets: Mapping[(str, Dataset)], models: Mapping[(str, ProbabilisticModel)]) -> BatchAcquisitionFunction
      :abstractmethod:

      :param datasets: The data from the observer.
      :param models: The models over each dataset in ``datasets``.
      :return: A batch acquisition function.



.. class:: SingleModelBatchAcquisitionBuilder

   Bases: :class:`abc.ABC`

   Convenience acquisition function builder for a batch acquisition function (or component of a
   composite batch acquisition function) that requires only one model, dataset pair.

   .. method:: using(self, tag: str) -> trieste.acquisition.function.BatchAcquisitionFunctionBuilder

      :param tag: The tag for the model, dataset pair to use to build this acquisition function.
      :return: A batch acquisition function builder that selects the model and dataset specified
          by ``tag``, as defined in :meth:`prepare_acquisition_function`.


   .. method:: prepare_acquisition_function(self, dataset: trieste.data.Dataset, model: trieste.models.ProbabilisticModel) -> AcquisitionFunction
      :abstractmethod:

      :param dataset: The data to use to build the acquisition function.
      :param model: The model over the specified ``dataset``.
      :return: A batch acquisition function.



.. class:: BatchReparametrizationSampler(sample_size: int, model: trieste.models.ProbabilisticModel)


   This sampler employs the *reparameterization trick* to approximate batches of samples from a
   :class:`ProbabilisticModel`\ 's predictive joint distribution as

   .. math:: x \mapsto \mu(x) + \epsilon L(x)

   where :math:`L` is the Cholesky factor s.t. :math:`LL^T` is the covariance, and
   :math:`\epsilon \sim \mathcal N (0, 1)` is constant for a given sampler, thus ensuring samples
   form a continuous curve.

   :param sample_size: The number of samples for each batch of points. Must be positive.
   :param model: The model to sample from.
   :raise ValueError (or InvalidArgumentError): If ``sample_size`` is not positive.

   .. method:: sample(self, at: trieste.type.TensorType, *, jitter: float = DEFAULTS.JITTER) -> trieste.type.TensorType

      Return approximate samples from the `model` specified at :meth:`__init__`. Multiple calls to
      :meth:`sample`, for any given :class:`BatchReparametrizationSampler` and ``at``, will
      produce the exact same samples. Calls to :meth:`sample` on *different*
      :class:`BatchReparametrizationSampler` instances will produce different samples.

      :param at: Batches of query points at which to sample the predictive distribution, with
          shape `[..., B, D]`, for batches of size `B` of points of dimension `D`. Must have a
          consistent batch size across all calls to :meth:`sample` for any given
          :class:`BatchReparametrizationSampler`.
      :param jitter: The size of the jitter to use when stabilising the Cholesky decomposition of
          the covariance matrix.
      :return: The samples, of shape `[..., S, B, L]`, where `S` is the `sample_size`, `B` the
          number of points per batch, and `L` the dimension of the model's predictive
          distribution.
      :raise ValueError (or InvalidArgumentError): If any of the following are true:

          - ``at`` is a scalar.
          - The batch size `B` of ``at`` is not positive.
          - The batch size `B` of ``at`` differs from that of previous calls.
          - ``jitter`` is negative.



.. class:: BatchMonteCarloExpectedImprovement(sample_size: int, *, jitter: float = DEFAULTS.JITTER)


   Bases: :class:`trieste.acquisition.function.SingleModelBatchAcquisitionBuilder`

   Expected improvement for batches of points (or :math:`q`-EI), approximated using Monte Carlo
   estimation with the reparametrization trick. See :cite:`Ginsbourger2010` for details.

   Improvement is measured with respect to the minimum predictive mean at observed query points.
   This is calculated in :class:`BatchMonteCarloExpectedImprovement` by assuming observations
   at new points are independent from those at known query points. This is faster, but is an
   approximation for noisy observers.

   :param sample_size: The number of samples for each batch of points.
   :param jitter: The size of the jitter to use when stabilising the Cholesky decomposition of
       the covariance matrix.
   :raise ValueError (or InvalidArgumentError): If ``sample_size`` is not positive, or
       ``jitter`` is negative.

   .. method:: prepare_acquisition_function(self, dataset: trieste.data.Dataset, model: trieste.models.ProbabilisticModel) -> AcquisitionFunction

      :param dataset: The data from the observer. Must be populated.
      :param model: The model over the specified ``dataset``. Must have event shape [1].
      :return: The batch *expected improvement* acquisition function.
      :raise ValueError (or InvalidArgumentError): If ``dataset`` is not populated, or ``model``
          does not have an event shape of [1].



